#!/usr/bin/env bash

set -o errexit
set -o nounset

function banner() {
    echo Distort images by pushing them through audio codecs.
}

function usage() {
    echo Usage: img-roundtrip \[options\] filename
}

function help_text(){
    cat << EOF
$(banner)
$(usage)

Defaults shown in [].
Audio options:
-a, --channels   audio channels used [1]
-b, --bitrate    bitrate used [64k]
-c, --codec      audio codec [libopus]
-r, --rate       sample rate [48000]
-s, --shift      shift roundtrip audio by n bytes forwards [0]
Image options:
-p, --pixfmt     pixel format [rgb24]
Other options:
-o, --output     output prefix [based on filename]
-h, --help       this help
EOF
}

# 1: input
# 2: output
# 3: sample rate
# 4: channels
# input: audio in NUT
# output: u8 audio
function audiotou8() {
    ffmpeg -f nut -i "$1" -f u8 -ac "$4" -ar "$3" "$2"
}

# 1: input
# 2: sample rate
# 3: channels
# 4: output
# 5: bitrate
# 6: codec
# input: u8 audio [rawvideo]
# output: audio in NUT
function u8toaudio() {
    ffmpeg -f u8 -ar "$2" -ac "$3" -i "$1" -b:a "$5" -c:a "$6" -f nut "$4"
}

# 1: input
# 2: pix_fmt
# 3: resolution
# 4: output
# convert u8 into self-describing images of a given pixel format and res
# input: u8 audio [rawvideo]
# output: self-describing images
function u8toimage() {
    ffmpeg -pix_fmt "$2" -s "$3" -f rawvideo -i "$1" -frames:v 1 "$4" -y
}

# 1: input
# 2: pix_fmt
# 3: output
# Convert images/video into rawvideo of a given pixel format
# input: self-describing images
# output: rawvideo
function imagetorawvideo() {
    ffmpeg -i "$1" -f rawvideo -pix_fmt "$2" "$3"
}

# 1: input
# 2: output
# 3: offset
# shifts images by n pixels right, wrapping to the left
# input: self-describing images
# output: self-describing images
function imageshift() {
    ffmpeg -i "$1" -vf rgbashift=rh="$3":gh="$3":bh="$3" "$2"
}

# 1: input
# 2: output
# 3: shift in samples (bytes)
# shifts audio n samples forward to correct for the tendency
# of audio codecs to shift audio ahead by n samples
# input: self-describing audio [u8 representing rawvideo]
# output: self-describing audio [u8 representing rawvideo]
function audioshift() {
    ffmpeg -i "$1" -c:a pcm_s24le -f nut -af adelay=delays="$3"S:all=1 "$2"
}

function file_notexist() {
    printf '%s : does not exist\n' "$filepath"
    exit 3
}


ARGS="$(getopt --options a:,b:,c:,p:,o:,r:,s:,h --long channels:,bitrate:,codec:,pixfmt,output:,rate:,shift:,help -- "$@")"
eval set -- "$ARGS"
while true; do
        case "$1" in
        -a | --channels)
            channels="$2"
            shift 2
            ;;
        -b | --bitrate)
            bitrate="$2"
            shift 2
            ;;
        -c | --codec)
            codec="$2"
            shift 2
            ;;
        -p | --pixfmt)
            pixfmt="$2"
            shift 2
            ;;
        -o | --output)
            output_prefix="$2"
            shift 2
            ;;
        -r | --rate)
            sample_rate="$2"
            shift 2
            ;;
        -s | --shift)
            offset="$2"
            shift 2
            ;;
        -h | --help)
            help_text
            exit 127
            ;;
        --)
            set +o nounset
            if [[ -z "$2" ]]; then
                echo "No file was specified."
                help_text
                exit 4
            fi
            set -o nounset
            filepath="$2"
            break
            ;;
        *)
            echo How did you get here?
            exit 1
            break
            ;;
    esac
done


if [[ ! (-e "$filepath") ]] # if the file does not exist
then
	file_notexist
fi

resolution="$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$filepath")"
pixfmt="${pixfmt:-rgb24}"
sample_rate="${sample_rate:-48000}"
offset="${offset:-0}"
bitrate="${bitrate:-64k}"
codec="${codec:-libopus}"
channels="${channels:-1}"

filename="$(basename "$filepath")"
base_filename="${filename%.*}"
output_prefix="${output_prefix:-$base_filename}"
output_filename="$output_prefix"-"$pixfmt"-"$sample_rate"-"$channels"-"$codec"-"$bitrate"-"$offset"

imagetorawvideo "$filepath" "$pixfmt" '-' | \
u8toaudio '-' "$sample_rate" "$channels" '-' "$bitrate" "$codec" | \
audioshift '-' '-' "$offset" | \
audiotou8 '-' '-' "$sample_rate" "$channels" | \
u8toimage '-' "$pixfmt" "$resolution" "$output_filename".png

