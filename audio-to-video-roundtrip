#!/usr/bin/env bash

set -o errexit
set -o nounset


function banner() {
    echo Distort audio by pushing them through video codecs.
}

function usage() {
    echo Usage: audio-to-video-roundtrip \[options\] filename
}

function help_text(){
    cat << EOF
$(banner)
$(usage)

Defaults shown in [].
Video options:
-b, --bitrate       video bitrate [16k]
-c, --codec         video codec [libx264]
-p, --pixfmt        pixel format [rgb24]
-s, --resolution    resolution [32x32]
Audio options:
-M, --no-mulaw      disable mu-law companding
Other options:
-o, --output        output prefix
-h, --help          this help
EOF
}

# 1: input
# 2: output
# 3: sample rate
# 4: channels
# 5: sample format
# convert self-describing audio to a raw sample format
# input type : audio in NUT
# output type: raw audio
function audiotoraw() {
    ffmpeg -hide_banner -f nut -i "$1" -f "$5" -ac "$4" -ar "$3" -vn "$2"
}

# 1: input
# 2: output
# converts self-describing audio to FLAC
# input type: self-describing audio
# output type: FLAC
function audiotoplayable() {
    ffmpeg -i "$1" -c:a flac -y "$2"
}

# 1: input
# 2: pixel format
# 3: resolution
# 4: framerate
# 5: output
# 6: video codec
# 7: video bitrate
# converts rawvideo to self-describing video in NUT
# input type : rawvideo [u8 audio]
# output type: video in NUT
function rawvideotovideo() {
    ffmpeg -hide_banner -f rawvideo -pix_fmt "$2" -s "$3" -framerate "$4" -i "$1" -c:v "$6" -b:v "$7" -f nut "$5"
}

# 1: input
# 2: output
# wraps self-describing media in the NUT container format
# input type : self-describing media
# output type: self-describing media in NUT
function wraptonut() {
    ffmpeg -hide_banner -i "$1" -c copy -f nut "$2"
}

# 1: input
# 2: output
# 3: pixel format
# converts video to rawvideo
# input type: self-describing video in NUT
# output type: rawvideo
function videotorawvideo() {
    ffmpeg -hide_banner -f nut -i "$1" -f rawvideo -pix_fmt "$3" "$2"
}

# 1: input
# 2: channels
# 3: sample rate
# 4: output
# applies the expand half of the mu-law algorithm
# input type: s32le
# output type: u8
function mulawexpand() {
    sox --guard --no-dither --show-progress \
        --channels "$2" --type u8  --rate "$3" "$1" \
        --channels "$2" --type s32 --rate "$3" "$4" \
        compand 0,0 0.2:-46.86,-80.0,-45.89,-79.02,-44.88,-77.99,-43.92,-77.02,-42.95,-76.03,-41.98,-75.04,-40.99,-74.02,-39.98,-73.0,-39.02,-72.01,-38.05,-71.0,-37.09,-70.01,-36.12,-69.0,-35.17,-68.0,-34.23,-67.01,-33.28,-66.0,-32.34,-65.01,-31.4,-64.0,-30.48,-63.0,-29.56,-62.0,-28.65,-61.0,-27.75,-60.0,-26.86,-59.0,-25.98,-58.0,-25.12,-57.0,-24.26,-56.0,-23.42,-55.0,-22.6,-54.0,-21.78,-53.0,-20.98,-52.0,-20.2,-51.0,-19.44,-50.0,-18.7,-49.0,-17.97,-48.0,-17.26,-47.0,-16.57,-46.0,-15.9,-45.0,-15.24,-44.0,-14.61,-43.0,-14.0,-42.0,-13.4,-41.0,-12.82,-40.0,-12.27,-39.0,-11.72,-38.0,-11.2,-37.0,-10.7,-36.0,-10.21,-35.0,-9.74,-34.0,-9.29,-33.0,-8.85,-32.0,-8.42,-31.0,-8.01,-30.0,-7.61,-29.0,-7.23,-28.0,-6.86,-27.0,-6.5,-26.0,-6.15,-25.0,-5.82,-24.0,-5.49,-23.0,-5.17,-22.0,-4.87,-21.0,-4.57,-20.0,-4.28,-19.0,-4.0,-18.0,-3.72,-17.0,-3.46,-16.0,-3.2,-15.0,-2.95,-14.0,-2.7,-13.0,-2.46,-12.0,-2.23,-11.0,-2.01,-10.0,-1.78,-9.0,-1.57,-8.0,-1.36,-7.0,-1.15,-6.0,-0.95,-5.0,-0.75,-4.0,-0.56,-3.0,-0.37,-2.0,-0.18,-1.0,0.0,0.0
}

# 1: input
# 2: channels
# 3: sample rate
# 4: output
# applies the compress half of the mu-law algorithm
# input type: u8
# output type: s32le
function mulawcompress() {
    sox --guard --no-dither --show-progress \
        --type s32 --rate "$3" --channels "$2" "$1" \
        --type u8  --rate "$3" --channels "$2" "$4" \
        compand 0,0 0.2:-80.0,-46.86,-79.02,-45.89,-77.99,-44.88,-77.02,-43.92,-76.03,-42.95,-75.04,-41.98,-74.02,-40.99,-73.0,-39.98,-72.01,-39.02,-71.0,-38.05,-70.01,-37.09,-69.0,-36.12,-68.0,-35.17,-67.01,-34.23,-66.0,-33.28,-65.01,-32.34,-64.0,-31.4,-63.0,-30.48,-62.0,-29.56,-61.0,-28.65,-60.0,-27.75,-59.0,-26.86,-58.0,-25.98,-57.0,-25.12,-56.0,-24.26,-55.0,-23.42,-54.0,-22.6,-53.0,-21.78,-52.0,-20.98,-51.0,-20.2,-50.0,-19.44,-49.0,-18.7,-48.0,-17.97,-47.0,-17.26,-46.0,-16.57,-45.0,-15.9,-44.0,-15.24,-43.0,-14.61,-42.0,-14.0,-41.0,-13.4,-40.0,-12.82,-39.0,-12.27,-38.0,-11.72,-37.0,-11.2,-36.0,-10.7,-35.0,-10.21,-34.0,-9.74,-33.0,-9.29,-32.0,-8.85,-31.0,-8.42,-30.0,-8.01,-29.0,-7.61,-28.0,-7.23,-27.0,-6.86,-26.0,-6.5,-25.0,-6.15,-24.0,-5.82,-23.0,-5.49,-22.0,-5.17,-21.0,-4.87,-20.0,-4.57,-19.0,-4.28,-18.0,-4.0,-17.0,-3.72,-16.0,-3.46,-15.0,-3.2,-14.0,-2.95,-13.0,-2.7,-12.0,-2.46,-11.0,-2.23,-10.0,-2.01,-9.0,-1.78,-8.0,-1.57,-7.0,-1.36,-6.0,-1.15,-5.0,-0.95,-4.0,-0.75,-3.0,-0.56,-2.0,-0.37,-1.0,-0.18,0.0,0.0
}

# 1: input
# 2: sample rate
# 3: channels
# 4: sample format
# 5: output
# 6: bitrate
# 7: codec
# converts raw data to audio of an arbitrary codec
# input type: $'sample format' audio [rawvideo]
# output type: self-describing audio in NUT
function rawtoaudio() {
    ffmpeg -hide_banner -f "$4" -ar "$2" -ac "$3" -i "$1" -b:a "$6" -c:a "$7" -f nut "$5" -y
}

function file_notexist() {
    printf '%s : does not exist\n' "$filepath"
    exit 3
}

ARGS="$(getopt --options h,p:,s:,c:,b:,M,o: --long help,pixfmt:,resolution:,size:,codec:,bitrate:,no-mulaw,output: -- "$@")"
eval set -- "$ARGS"
while true; do
        case "$1" in
        -h | --help)
            help_text
            exit 127
            ;;

        -p | --pixfmt)
            pixfmt="$2"
            shift 2
            ;;
        -s | --size | --resolution)
            resolution="$2"
            shift 2
            ;;
        -c | --codec)
            codec="$2"
            shift 2
            ;;
        -b | --bitrate)
            bitrate="$2"
            shift 2
            ;;
        -M | --no-mulaw)
            do_mulaw='no'
            shift
            ;;
        -o | --output)
            output_prefix="$2"
            shift 2
            ;;
        --)
            set +o nounset
            if [[ -z "$2" ]]; then
                echo "No file was specified."
                help_text
                exit 4
            fi
            set -o nounset
            filepath="$2"
            break
            ;;
        *)
            echo How did you get here? "$@" happened.
            exit 1
            break
            ;;
    esac
done

if [[ ! (-e "$filepath") ]] # if the file does not exist
then
	file_notexist
fi

channels="$(ffprobe -v error -select_streams a -of default=noprint_wrappers=1:nokey=1 -show_entries stream=channels "$filepath")"
sample_rate="$(ffprobe -v error -select_streams a -of default=noprint_wrappers=1:nokey=1 -show_entries stream=sample_rate "$filepath")"
do_mulaw="${do_mulaw:-yes}"

pixfmt="${pixfmt:-rgb24}"
resolution="${resolution:-32x32}"
framerate="${framerate:-30}"
codec="${codec:-libx264}"
bitrate="${bitrate:-16k}"

filename="$(basename "$filepath")"
base_filename="${filename%.*}"
output_prefix="${output_prefix:-$base_filename}"
output_filename="$output_prefix"-"$pixfmt"-"$codec"-"$bitrate"-"$resolution"-"$do_mulaw"

if [[ "$do_mulaw" == "yes" ]]
then
    wraptonut "$filepath" - | \
    audiotoraw - - "$sample_rate" "$channels" 's32le' | \
    mulawcompress - "$channels" "$sample_rate" - | \
    rawvideotovideo - "$pixfmt" "$resolution" "$framerate" - "$codec" "$bitrate" | \
    videotorawvideo - - "$pixfmt" | \
    mulawexpand - "$channels" "$sample_rate" - | \
    rawtoaudio - "$sample_rate" "$channels" 's32le' - '0' "flac" | \
    audiotoplayable - "$output_filename".flac
else
    wraptonut "$filepath" - | \
    audiotoraw - - "$sample_rate" "$channels" 'u8' | \
    rawvideotovideo - "$pixfmt" "$resolution" "$framerate" - "$codec" "$bitrate" | \
    videotorawvideo - - "$pixfmt" | \
    rawtoaudio - "$sample_rate" "$channels" 'u8' - '0' "flac" | \
    audiotoplayable - "$output_filename".flac
fi
